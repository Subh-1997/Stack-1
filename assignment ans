1.Valid Parentheses

class Solution {
    public boolean isValid(String parentheses) {
        Stack<Character>stack=new Stack<>();
            for (int i = 0; i < parentheses.length(); i++) {
            char ch = parentheses.charAt(i);
            if (ch == '(' || ch == '[' || ch == '{') {
                stack.push(ch);
            } else if (stack.empty()) {
                return false;
            } else {
                char top = stack.pop();
                if ((top == '(' && ch != ')') || (top == '[' && ch != ']')
                        || (top == '{' && ch != '}')) {
                    return false;
                }
            }
        }
        return stack.empty();
    }
}
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
2.Nearest Smaller Element

public class Solution {
    public ArrayList<Integer> prevSmaller(ArrayList<Integer> A) {
       ArrayList<Integer> ans = new ArrayList<Integer>();
       Stack<Integer> st = new Stack<>();
       
       for(int i = 0;i<A.size();i++){
           while(!st.isEmpty() && A.get(i)<=st.peek()){
               st.pop();
           }
           
           if(st.isEmpty()){
               ans.add(-1);
           }else{
              ans.add(st.peek()); 
           }
           st.add(A.get(i));
       }
        return ans;
    }
}
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
3.Largest Rectangle in Histogram

class Solution {
    public int largestRectangleArea(int[] heights) {
       int n = heights.length;
        Stack < Integer > st = new Stack < > ();
        int leftSmall[] = new int[n];
        int rightSmall[] = new int[n];
        for (int i = 0; i < n; i++) {
            while (!st.isEmpty() && heights[st.peek()] >= heights[i]) {
                st.pop();
            }

            if (st.isEmpty()) leftSmall[i] = 0;
            else leftSmall[i] = st.peek() + 1;
            st.push(i);
        }

         while (!st.isEmpty()) st.pop();

        for (int i = n - 1; i >= 0; i--) {
            while (!st.isEmpty() && heights[st.peek()] >= heights[i]) {
                st.pop();
            }

            if (st.isEmpty()) rightSmall[i] = n - 1;
            else rightSmall[i] = st.peek() - 1;

            st.push(i);
        }

    int maxA = 0;
        for (int i = 0; i < n; i++) {
            maxA = Math.max(maxA, heights[i] * (rightSmall[i] - leftSmall[i] + 1));
        }
        return maxA;
    }
}
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
4.
