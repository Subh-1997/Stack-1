1.Valid Parentheses

class Solution {
    public boolean isValid(String parentheses) {
        Stack<Character>stack=new Stack<>();
            for (int i = 0; i < parentheses.length(); i++) {
            char ch = parentheses.charAt(i);
            if (ch == '(' || ch == '[' || ch == '{') {
                stack.push(ch);
            } else if (stack.empty()) {
                return false;
            } else {
                char top = stack.pop();
                if ((top == '(' && ch != ')') || (top == '[' && ch != ']')
                        || (top == '{' && ch != '}')) {
                    return false;
                }
            }
        }
        return stack.empty();
    }
}
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
2.Nearest Smaller Element

public class Solution {
    public ArrayList<Integer> prevSmaller(ArrayList<Integer> A) {
       ArrayList<Integer> ans = new ArrayList<Integer>();
       Stack<Integer> st = new Stack<>();
       
       for(int i = 0;i<A.size();i++){
           while(!st.isEmpty() && A.get(i)<=st.peek()){
               st.pop();
           }
           
           if(st.isEmpty()){
               ans.add(-1);
           }else{
              ans.add(st.peek()); 
           }
           st.add(A.get(i));
       }
        return ans;
    }
}
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
3.
